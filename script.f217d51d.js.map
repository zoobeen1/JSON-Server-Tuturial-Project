{"version":3,"sources":["js/crud.js","js/script.js"],"names":["BASE_URL","addBook","book","options","method","headers","body","JSON","stringify","res","fetch","json","getBooks","resp","getBook","bookId","patchBook","params","putBook","deleteBook","url"],"mappings":";AAgDe,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAhDf,MAAMA,EAAW,wBAEjB,eAAeC,EAAQC,GACfC,MAAAA,EAAU,CACdC,OAAQ,OACRC,QAAS,CAAkB,eAAA,oBAC3BC,KAAMC,KAAKC,UAAUN,IAEjBO,QAAYC,SAASV,UAAkBG,GACtC,aAAMM,EAAIE,OAGnB,eAAeC,IACPC,MAAAA,QAAaH,SAASV,WACrB,aAAMa,EAAKF,OAEpB,eAAeG,EAAQC,GACfF,MAAAA,QAAaH,SAASV,WAAkBe,KACvC,aAAMF,EAAKF,OAGpB,eAAeK,EAAUD,EAAQE,GACzBd,MAAAA,EAAU,CACdC,OAAQ,QACRC,QAAS,CAAkB,eAAA,oBAC3BC,KAAMC,KAAKC,UAAUS,IAEjBR,QAAYC,SAASV,WAAkBe,IAAUZ,GAChD,aAAMM,EAAIE,OAEnB,eAAeO,EAAQH,EAAQE,GACvBd,MAAAA,EAAU,CACdC,OAAQ,MACRC,QAAS,CAAkB,eAAA,oBAC3BC,KAAMC,KAAKC,UAAUS,IAEjBR,QAAYC,SAASV,WAAkBe,IAAUZ,GAChD,aAAMM,EAAIE,OAGnB,eAAeQ,EAAWJ,GAClBK,MAAAA,KAASpB,WAAkBe,IAI3BN,QAAYC,MAAMU,EAHR,CACdhB,OAAQ,WAGH,aAAMK,EAAIE,OAEJ,IAAA,EAAA,CAAEV,QAAAA,EAASa,QAAAA,EAASF,SAAAA,EAAUI,UAAAA,EAAWE,QAAAA,EAASC,WAAAA,GAAlD,QAAA,QAAA;;AChDd,aAGD,IAAA,EAAA,EAAA,QAAA,WAAA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA","file":"script.f217d51d.js","sourceRoot":"../src","sourcesContent":["const BASE_URL = 'http://localhost:3000';\n//create\nasync function addBook(book) {\n  const options = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(book),\n  };\n  const res = await fetch(`${BASE_URL}/books`, options);\n  return await res.json();\n}\n//read\nasync function getBooks() {\n  const resp = await fetch(`${BASE_URL}/books`);\n  return await resp.json();\n}\nasync function getBook(bookId) {\n  const resp = await fetch(`${BASE_URL}/books/${bookId}`);\n  return await resp.json();\n}\n//update\nasync function patchBook(bookId, params) {\n  const options = {\n    method: 'PATCH',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(params),\n  };\n  const res = await fetch(`${BASE_URL}/books/${bookId}`, options);\n  return await res.json();\n}\nasync function putBook(bookId, params) {\n  const options = {\n    method: 'PUT',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(params),\n  };\n  const res = await fetch(`${BASE_URL}/books/${bookId}`, options);\n  return await res.json();\n}\n//delete\nasync function deleteBook(bookId) {\n  const url = `${BASE_URL}/books/${bookId}`;\n  const options = {\n    method: 'DELETE',\n  };\n  const res = await fetch(url, options);\n  return await res.json();\n}\nexport default { addBook, getBook, getBooks, patchBook, putBook, deleteBook };\n","﻿'use strict';\n// Делаем строгий код. Дальше идет весь код JS-файла\n\nimport API from './crud';\n\n//Create\n// API.addBook({\n//   title: 'Последнее путешествие 3',\n//   author: 'Бернард Куросед',\n//   genres: ['приключения', 'драма'],\n//   rating: '4',\n// });\n\n//Read\n// API.getBook(7);\n// API.getBooks();\n\n//Update\n// API.patchBook(7, {\n//   title: 'Какая-то хрень но обновленная',\n//   rating: '2.38',\n// });\n// API.putBook(7, {\n//   title: 'Какая-то хрень',\n//   author: 'Некий Пень',\n//   genres: ['муть'],\n//   rating: '3.38',\n// });\n\n//Delete\n// API.deleteBook(10);\n"]}